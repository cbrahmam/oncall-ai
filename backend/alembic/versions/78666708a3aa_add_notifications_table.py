"""add_notifications_table

Revision ID: 78666708a3aa
Revises: 4a0e7974dec9
Create Date: 2025-09-07 17:25:21.844219

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '78666708a3aa'
down_revision: Union[str, Sequence[str], None] = '4a0e7974dec9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_user_consents_user_id'), table_name='user_consents')
    op.drop_table('user_consents')
    op.drop_table('user_privacy_settings')
    op.drop_index(op.f('idx_security_events_risk_level'), table_name='security_events')
    op.drop_index(op.f('idx_security_events_timestamp'), table_name='security_events')
    op.drop_index(op.f('idx_security_events_user_id'), table_name='security_events')
    op.drop_table('security_events')
    op.drop_index(op.f('idx_gdpr_requests_status'), table_name='gdpr_requests')
    op.drop_index(op.f('idx_gdpr_requests_user_id'), table_name='gdpr_requests')
    op.drop_table('gdpr_requests')
    op.drop_table('mfa_secrets')
    op.drop_index(op.f('idx_user_sessions_active'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_user_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('idx_oauth_accounts_user_id'), table_name='oauth_accounts')
    op.drop_constraint(op.f('unique_provider_user'), 'oauth_accounts', type_='unique')
    op.drop_constraint(op.f('oauth_accounts_user_id_fkey'), 'oauth_accounts', type_='foreignkey')
    op.create_foreign_key(None, 'oauth_accounts', 'users', ['user_id'], ['id'])
    op.alter_column('organizations', 'slug',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'last_password_change')
    op.drop_column('users', 'account_locked_until')
    op.drop_column('users', 'mfa_enabled')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('mfa_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('account_locked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_password_change', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=True))
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('organizations', 'slug',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_constraint(None, 'oauth_accounts', type_='foreignkey')
    op.create_foreign_key(op.f('oauth_accounts_user_id_fkey'), 'oauth_accounts', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('unique_provider_user'), 'oauth_accounts', ['provider', 'provider_user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_oauth_accounts_user_id'), 'oauth_accounts', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('device_fingerprint', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_sessions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_sessions_pkey')),
    sa.UniqueConstraint('session_token', name=op.f('user_sessions_session_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_sessions_active'), 'user_sessions', ['is_active'], unique=False)
    op.create_table('mfa_secrets',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('encrypted_secret', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('backup_codes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('mfa_secrets_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('mfa_secrets_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('mfa_secrets_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('gdpr_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('request_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('requested_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('request_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_log', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('verification_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('gdpr_requests_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('gdpr_requests_pkey'))
    )
    op.create_index(op.f('idx_gdpr_requests_user_id'), 'gdpr_requests', ['user_id'], unique=False)
    op.create_index(op.f('idx_gdpr_requests_status'), 'gdpr_requests', ['status'], unique=False)
    op.create_table('security_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('resolved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], name=op.f('security_events_resolved_by_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('security_events_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('security_events_pkey'))
    )
    op.create_index(op.f('idx_security_events_user_id'), 'security_events', ['user_id'], unique=False)
    op.create_index(op.f('idx_security_events_timestamp'), 'security_events', ['timestamp'], unique=False)
    op.create_index(op.f('idx_security_events_risk_level'), 'security_events', ['risk_level'], unique=False)
    op.create_table('user_privacy_settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('analytics_consent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('marketing_consent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('third_party_sharing', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('data_retention_preference', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_privacy_settings_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_privacy_settings_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_privacy_settings_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('user_consents',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('purpose', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('consent_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_consents_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_consents_pkey')),
    sa.UniqueConstraint('user_id', 'purpose', name=op.f('unique_user_purpose_consent'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_consents_user_id'), 'user_consents', ['user_id'], unique=False)
    # ### end Alembic commands ###
